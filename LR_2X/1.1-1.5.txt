1.1) d) Так как ( 1 \ neq 2 ), равенство ( k \mod 7 = k \ div 5 - 1 ) не выполняется при ( k = 15 ).
1.2) 3)false
1.3) 2)
1. not c
2. a and b 
3. not c and d
4. (a and b) or (not c and d)
1.4) 1)
В языке программирования Pascal логические значения (true и false) используются для представления булевых переменных, где true обозначает "истину", а false – "ложь". Попытка выполнить операцию сложения между двумя булевыми значениями, как в записи true + false, приведет к ошибке. Вот объяснение, почему это происходит:
### Ошибки:
1. Несоответствие типов: 
   - В Pascal операторы, такие как +, предназначены для работы с числовыми типами (например, Integer, Real, и т. д.), а не с логическими. Логические переменные имеют тип Boolean, и их нельзя напрямую складывать, как числовые значения.
   - В данном случае компилятор будет выдавать ошибку, указывая на то, что не может выполнить операцию сложения между двумя значениями типа Boolean.

2. Отсутствие явного преобразования типов:
   - В некоторых языках программирования, таких как C или JavaScript, true и false могут быть неявно преобразованы в числовые значения (где true может быть равен 1, а false равен 0). Однако в Pascal для такой операции необходимо явно привести типы, что также не рекомендуется, так как это может привести к путанице.

### Как исправить:
Если вы хотите получить числовое представление для логических значений и выполнить операцию сложения, вы можете сначала привести их к целочисленному типу. Например:

var
  result: Integer;
begin
  result := Ord(true) + Ord(false); // Ord() преобразует true в 1, а false в 0
end;

В этом случае функция Ord() используется для преобразования логических значений в их числовые эквиваленты: true становится 1, а false – 0. Сложение затем выполнится корректно, и результат будет равен 1 (1 + 0).
1.5) i) (N mod 2 = K mod 2)
